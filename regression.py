import pandas as pdimport numpy as np# In[1] test_areadata = pd.read_csv('train.csv', encoding = 'big5', index_col=2)data_change = data.iloc[:,2:]data_change[data_change == 'NR'] = 0r_data = data_change.to_numpy()# In[2]i = 0month_day = {}for month in range(12):    temp = np.empty([18,480])    for day in range(20):        temp[:, day*24: (day+1)*24 ] = r_data[i: (i+18),:]        i = i + 18    month_day[month] = temp    # In[3]x = np.empty([471*12, 18*9], dtype=float)y = np.empty([12*471, 1], dtype=float)test_x = np.empty([471*12, 18*9], dtype=float)for month in range(12):    for day in range(20):        for hour in range(24):            if day == 19 and hour > 14:                continue            x[(month*471 + day*24 + hour), :] = month_day[month][:,(day*24 + hour): (day*24 + hour + 9)].reshape(1,-1)            test_x[(month*471 + day*24 + hour), :] = month_day[month][:,(day*24 + hour): (day*24 + hour + 9)].reshape(1,-1)            y[(month*471 + day*24 + hour), 0] = month_day[month][9, (day*24 + hour + 9)]# In[normalize]            mean_x = np.mean(x, axis = 0) #18 * 9 std_x = np.std(x, axis = 0) #18 * 9 for i in range(len(x)): #12 * 471    for j in range(len(x[0])): #18 * 9         if std_x[j] != 0:            x[i][j] = (x[i][j] - mean_x[j]) / std_x[j]# In[gradient Descent]             def gradientDescent(x, y, w, learning_rate, m, numIterations):    xTrans = x.transpose()    for i in range(0, numIterations):        y_hat = np.dot(x, w)        print(y_hat)        loss = y_hat - y        cost = np.sum(loss ** 2) / (2 * m)        print("Iteration %d | Cost: %f" % (i, cost))        gradient = np.dot(xTrans, loss) / m        w = w - learning_rate * gradient    return w            # In[feed data]w = np.empty([18*9+1,1])iteration = 1000learningRate = 0.05m=471*12w = np.zeros([18*9+1, 1])x = np.concatenate((np.ones([12 * 471, 1]), x), axis = 1).astype(float)final_w = gradientDescent(x, y, w, learningRate, m, iteration)            # In[save weight]np.save('weight.py', final_w)     # In[Lading test data] testdata = pd.read_csv('./test.csv', header = None, encoding = 'big5')test_data = testdata.iloc[:, 2:]test_data[test_data == 'NR'] = 0test_data = test_data.to_numpy()test_x = np.empty([240, 18*9], dtype = float)for i in range(240):    test_x[i, :] = test_data[18 * i: 18* (i + 1), :].reshape(1, -1)for i in range(len(test_x)):    for j in range(len(test_x[0])):        if std_x[j] != 0:            test_x[i][j] = (test_x[i][j] - mean_x[j]) / std_x[j]test_x = np.concatenate((np.ones([240, 1]), test_x), axis = 1).astype(float)# In[predict test data]w_load = np.load('weight.py.npy')ans_y = np.dot(test_x, w_load)# In[output data save]import csvwith open('submit2.csv', mode='w', newline='') as submit_file:    csv_writer = csv.writer(submit_file)    header = ['id', 'value']    print(header)    csv_writer.writerow(header)    for i in range(240):        row = ['id_' + str(i), ans_y[i][0]]        csv_writer.writerow(row)        print(row)